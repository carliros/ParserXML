
imports{
module FormatTree
( formatTree
) where

import UU.Pretty
import NTree
}

INCLUDE "NTree.ag"

-- =====================================
-- semantic funtions for showNTree
-- =====================================

-- who is the node root tag?
ATTR NTree Node NTrees [ noderoot: Bool ||]
SEM NTree
    | NTree node.noderoot   = @lhs.noderoot
            ntrees.noderoot = False

SEM NRoot
    | NRoot ntree.noderoot = True

-- building PP_Doc
ATTR NRoot [|| ppdoc: PP_Doc ]
SEM NRoot
    | NRoot lhs.ppdoc = vlist @ntree.ppdocs

ATTR NTree NTrees Node [|| ppdocs: {[PP_Doc]} ]
SEM NTree
    | NTree lhs.ppdocs = let tails = if @lhs.noderoot
                                     then map (text "   " >|<) @ntrees.ppdocs
                                     else @ntrees.ppdocs
                           in @node.ppdocs ++ tails

SEM NTrees
    | Cons lhs.ppdocs = let str = if null @tl.ppdocs
                                  then "    "
                                  else "|   "
                            (bf,af) = splitAt 2 @hd.ppdocs
                            aff     = map (text str >|<) af
                        in bf ++ aff ++ @tl.ppdocs
    | Nil  lhs.ppdocs = []

SEM Node
    | NText  lhs.ppdocs = if @lhs.noderoot
                          then [ text  "---NText" >#< text (show @text) ]
                          else [ text "|"
                               , text "+---NText" >#< text (show @text)
                               ]
    | NTag  lhs.ppdocs = if @lhs.noderoot
                         then [ text  "---NTag" >#< text @tag ]
                         else (text "|") :
                              [text "+---NTag" >#< text @tag ] ++
                              (map (\(nm,vl) -> text "|" >#< text nm >#< text "=" >#< text (show vl)) @attributes)

-- =====================================
-- auxiliar haskell funtions
-- =====================================
{
formatTree :: NTree -> IO()
formatTree nt = do let ppd = sem_NRoot (NRoot nt)
                   render ppd 10
                   putStr "\n"
}
